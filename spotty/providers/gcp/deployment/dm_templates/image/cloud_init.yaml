#cloud-config

write_files:
  - path: /tmp/scripts/init.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash -x

      # stop daily updates for apt (fix for the issue when the cloud-init fails to install packages
      # because the "/var/lib/dpkg/lock" file is locked)
      systemctl disable --now apt-daily{,-upgrade}.{timer,service}

      # install gcloud
      export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
      echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
      curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      apt-get update && sudo apt-get install google-cloud-sdk

      # install NVIDIA Docker
      /tmp/scripts/install_docker.sh

      # send signal that the instance is ready
      DOCKER_EXIT_CODE=$?
      if [[ $DOCKER_EXIT_CODE -eq 0 ]] ; then
        gcloud beta runtime-config configs variables set /success/1 1 --config-name {{DEPLOYMENT_NAME}}-docker-status --is-text
      else
        gcloud beta runtime-config configs variables set /failure/1 1 --config-name {{DEPLOYMENT_NAME}}-docker-status --is-text
        exit $DOCKER_EXIT_CODE
      fi

      # create the image
      IMAGE_ID=`/tmp/scripts/create_image.sh`

      # send signal that the image is created
      IMAGE_EXIT_CODE=$?
      if [[ $IMAGE_EXIT_CODE -eq 0 ]] ; then
        gcloud beta runtime-config configs variables set /success/1 $IMAGE_ID --config-name {{DEPLOYMENT_NAME}}-image-status --is-text
      else
        gcloud beta runtime-config configs variables set /failure/1 1 --config-name {{DEPLOYMENT_NAME}}-image-status --is-text
        exit $IMAGE_EXIT_CODE
      fi

      # shutdown the instance
      # TODO: delete instace trough CLI
      shutdown -h now

  - path: /tmp/scripts/install_docker.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash -xe

      # install Docker CE
      apt-get update
      apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg-agent \
        software-properties-common
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      add-apt-repository \
         "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
         $(lsb_release -cs) \
         stable"
      apt-get update
      apt-get install -y docker-ce

      # install NVIDIA driver
      apt-key adv --fetch-keys  http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
      bash -c 'echo "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64 /" > /etc/apt/sources.list.d/cuda.list'
      mkdir /usr/lib/nvidia  # a fix to install the driver, see: https://devtalk.nvidia.com/default/topic/1032456/linux/nvidia-387-26-for-ubuntu-16-04-package-broken-/
      apt-get update
      apt-get install -y nvidia-410

      # install nvidia-docker2
      curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | apt-key add -
      distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
      curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \
        tee /etc/apt/sources.list.d/nvidia-docker.list
      apt-get update
      apt-get install -y nvidia-docker2

      # reload the Docker daemon configuration
      pkill -SIGHUP dockerd

      # test NVIDIA Docker runtime
      docker run --runtime=nvidia --rm nvidia/cuda:10.0-base-ubuntu16.04 nvidia-smi
      docker rmi $(docker images -q)

  - path: /tmp/scripts/create_image.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash -xe

      # install jq
      apt-get install -y jq

      # flush the disk buffers
      sync

      # create AMI
      DISK_NAME=`curl "http://metadata.google.internal/computeMetadata/v1/instance/disks/0/device-name" -H "Metadata-Flavor: Google"`
      IMAGE_JSON=`gcloud compute images create {{IMAGE_NAME}} --force --source-disk $DISK_NAME --source-disk-zone {{ZONE}} --format json`
      echo $IMAGE_JSON | jq -r '.id'

runcmd:
  - /tmp/scripts/init.sh
